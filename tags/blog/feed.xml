<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on tellme.tokyo</title>
    <link>https://tellme.tokyo/tags/blog/</link>
    <description>Recent content in blog on tellme.tokyo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>BABAROT All Right Reserved.</copyright>
    <lastBuildDate>Wed, 29 Jan 2020 23:21:50 +0900</lastBuildDate><atom:link href="https://tellme.tokyo/tags/blog/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cloudflare から GitHub Pages の HTTPS 機能に移行する</title>
      <link>https://tellme.tokyo/post/2020/01/29/migrate-https-gh-pages-from-cloudflare/</link>
      <pubDate>Wed, 29 Jan 2020 23:21:50 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2020/01/29/migrate-https-gh-pages-from-cloudflare/</guid>
      <description>以前は GitHub Pages だけでは HTTPS 配信ができなかったので、Cloudflare をプロキシにして HTTPS 化させていた。
カスタムドメインの GitHub Pages で HTTPS を使う - Qiita
もう必要ないので Cloudflare を通さないようにする。
Before:
Domain-provider DNS -&amp;gt; Cloudflare DNS -&amp;gt; GitHub -&amp;gt; tellme.tokyo After:
Domain-provider DNS -&amp;gt; GitHub -&amp;gt; tellme.tokyo 1. ドメインプロバイダの DNS 設定を Cloudflare からプロバイダ提供のものに変更する Cloudflare DNS を使っていたのを、
 ムームードメインの DNS サーバを使うようにセットアップした。
 2. GitHub Pages への IP アドレスを A レコードに設定する GitHub Pages に向ける。
 参考: GitHub Pages で HTTPS を有効にする | tellme.</description>
    </item>
    
    <item>
      <title>はてなブログの記事をインポートした</title>
      <link>https://tellme.tokyo/post/2020/01/28/import-hatena-blog/</link>
      <pubDate>Tue, 28 Jan 2020 00:11:10 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2020/01/28/import-hatena-blog/</guid>
      <description>動機はこれ。
テキストの引越し
今まで、
 Qiita はてなブログ GitHub (このブログ)  に文章を書いてきた。
Medium とか他にもどこかに書いていたような気もするけど気にしないことにした (といいつつ Note は使ってみたいと思っている)。
はてなブログに関しては1度作って消してまたやり直している。 そのときに2014年頃以前のテキストを失った。 これからはすべて GitHub で管理しようと思っている。 自分のブログが1番落ち着くし、どんな話題でも好きに書けるし、サービス終了を気にする必要もないし、ホスティングの乗り換えも簡単にできる (今は GitHub Pages を使ってるけど Netlify にもいけるし適当なサーバでもよい)。
そういえばこのブログ以外にも以前 GitHub でいくつか文章を書いていたこともあった。
Qiita も以前はよく使っていたけどもう使っていないし、はてなブログも使っていない。 Qiita の記事も移行するかどうかは未定1だけど、はてなブログにある記事は愛着もあるので全部移行することにした。
 移行に使ったのはこれ。
 これはもともとローカルに引っ張ってきて更新してブログに Sync するようなツールっぽいけど、これのおかげで自分で生 API 叩かずに手元に全エントリを引っ張ってこれたので使い勝手が良かった。
そのあとは適当に YAML の Front matter をこのブログ用に書き換えて終わり。 画像は自力でダウンロードして GitHub のディレクトリに突っ込んだ。 数が少なかったのと一部の画像ははてなにアップロードせずに CloudApp を使って参照させていたので移行する必要がなかったのも大きい。
とりあえず引っ越した記事に Front matter にはインポート元を書いて、こっちのページから辿れるようにはしてある (oldlink という Front matter 要素を作って、記事 Body に 元記事 というリンク href を埋め込む)。 けど、インポートも済んだことだし気が向いたらはてなブログ自体を消すかもしれない。</description>
    </item>
    
    <item>
      <title>GitHub Pages で HTTPS を有効にする</title>
      <link>https://tellme.tokyo/post/2020/01/20/github-pages-with-https/</link>
      <pubDate>Mon, 20 Jan 2020 19:58:54 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2020/01/20/github-pages-with-https/</guid>
      <description>GitHub Pages で静的ページを公開するのが簡単なのでよく使う。 これまで公開したサイトの HTTPS 化は Cloudfrare でやっていた。1 めんどくさくて移行していなかったんだけど HTTPS 化するのも GitHub Pages の設定画面からできるようなのでやっていく2。
1. IP をレジストラに追加する 公式ガイドにある通り、GitHub の A レコードをすべて登録する。
185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153   待っていると数分でつながるようになる。
$ dig babarot.me +nostats +nocomments +nocmd ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; babarot.me +nostats +nocomments +nocmd ;; global options: +cmd ;babarot.me. IN A babarot.me. 3185 IN A 185.199.110.153 babarot.me. 3185 IN A 185.199.108.153 babarot.me. 3185 IN A 185.199.111.153 babarot.me. 3185 IN A 185.199.109.153 2.</description>
    </item>
    
    <item>
      <title>スムーズに Hugo でブログを書くツール</title>
      <link>https://tellme.tokyo/post/2018/10/16/write-blog-smoothly/</link>
      <pubDate>Tue, 16 Oct 2018 13:18:07 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2018/10/16/write-blog-smoothly/</guid>
      <description>このブログ (b4b4r07/tellme.tokyo) ではマークダウンで記事を書き、Hugo を使って静的ファイルを生成して GitHub Pages でホスティングしている。
とても便利なのだが、いくつか面倒な点がある。
 リアルタイムに記事のプレビューが見たいとなると、hugo server -D する必要があり、都度別コンソールで立ち上げるのが面倒 記事をあたらしく書き始めるとき hugo new post/&amp;lt;filename&amp;gt;.md を打つのが面倒 過去記事を編集するのが面倒 hugo を実行すると draft の記事も生成されてしまう (index には載らないが、生成されるので commit してしまう)  いろいろ面倒なので、Hugo でブログを書くだけのツール (hugo wrapper) を書いた。 hugo の上位互換というわけではなく、必要な機能の不便な部分だけを Override しているだけのツールなので合わせて使っていく。
tellme.tokyo/cmd/blog at master · b4b4r07/tellme.tokyo
Usage: blog [--version] [--help] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] Available commands are: edit Edit blog articles new Create new blog article 簡単な CLI ツールになっていて、ブログを編集するときに blog edit とすれば fzf が立ち上がって記事を選択できるようになっている。
$ blog edit &amp;gt; 39/39 &amp;gt; スムーズに Hugo ブログを書くツール Windows 時代の使用ソフト晒し Bind Address で少しハマった話 Hugo で PlantUML のようなシーケンス図を描画する Kubernetes 上で Credentials を扱う HashiCorp Vault の Unseal と Rekey 東京衣食住 Microservices Platform Meetupで話した 『ルポ川崎』を読んだ fzf との連携は b4b4r07/go-finder でやっている1。</description>
    </item>
    
  </channel>
</rss>
