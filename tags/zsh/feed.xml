<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zsh on tellme.tokyo</title>
    <link>https://tellme.tokyo/tags/zsh/</link>
    <description>Recent content in zsh on tellme.tokyo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>BABAROT All Right Reserved.</copyright>
    <lastBuildDate>Thu, 22 Sep 2016 00:34:48 +0900</lastBuildDate><atom:link href="https://tellme.tokyo/tags/zsh/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>zplug では Collaborators を募集しています</title>
      <link>https://tellme.tokyo/post/2016/09/22/003448/</link>
      <pubDate>Thu, 22 Sep 2016 00:34:48 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2016/09/22/003448/</guid>
      <description>zplug は A next-generation plugin manager for zsh と謳い、絶賛開発中の zsh 向けのプラグインマネージャです。設計当初の目標通りフルスタックなツールになってきており、もはや zsh で書かれたというだけの、単なるパッケージマネージャとして使うことができるほどの機能を持ちはじめています。
どんな機能があるか、どんな使い方ができるかなどは公式の README をご覧ください。最近では、ドキュメントの多言語化にも取り組んでおり、日本語版の README も追加しました。お気に入りの機能として特筆すると、例えば C 言語で書かれたツールの管理もできます:
# インストール、アップデートに反応してビルドが走る zplug &amp;#34;jhawthorn/fzy&amp;#34;, \  as:command, \  rename-to:fzy, \  hook-build:&amp;#34; { make sudo make install }&amp;#34; 現在、zplug では @b4b4r07 と @NigoroJr さんの2人で開発・メンテナンスしております。@zplug-man は bot メンバーです。zplug ではコミュニケーション用に Slack を導入しており、Slack から zplug-man に作業させたりしています。
 Join us!  そんな zplug では Collaborators を募集しています。記述する言語は Shell Script (zsh) です。zsh では黒魔術みたいな記述がたくさん出てきます。例えば:
if (( $#unclassified_plugins == 0 )); then # If $tags[use] is a regular file, # expect to expand to $tags[dir]/*.</description>
    </item>
    
    <item>
      <title>最近の zplug の変更について</title>
      <link>https://tellme.tokyo/post/2015/12/21/122701/</link>
      <pubDate>Mon, 21 Dec 2015 12:27:01 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2015/12/21/122701/</guid>
      <description>zplug 公開から今日で1ヶ月。いくつかの機能を追加した
1. ローカルプラグインを管理できるようになった 先日の issue（#54）によってローカルリポジトリをロード対象とすることが可能になった。neobundle.vim や vim-plug にもあるお馴染みの機能だ。
zplug &amp;#34;~/.zsh&amp;#34;, from:local from タグを使って指定する。自分の場合、~/.zsh 以下で zsh の設定ファイルを次のように分割しているため、この機能はとても便利に働く。デフォルトでは &amp;quot;*.zsh&amp;quot; が読み込み対象になっているので ~/.zsh 以下の zsh ファイルを簡単に zplug で管理できる
$ tree ~/.zsh /Users/b4b4r07/.zsh ├── 10_utils.zsh ├── 20_keybinds.zsh ├── 30_aliases.zsh ├── 40_prompt.zsh ├── 50_setopt.zsh ├── 60_export.zsh ├── Completion │ ├── _ack │ ├── _add-sshkey-remote │ ├── _ag ... │ └── _path ├── Makefile └── README.md フルパスでない場合は $ZPLUG_HOME を基準にパス解決される。
zplug &amp;#34;repos/user/repo&amp;#34;, from:local 2. 読み込むファイルを一部無視できるようになった これもまた issue（#56）によって導入された機能で、of タグと逆の指定をするためのタグ ignore が使用できるようになった。</description>
    </item>
    
    <item>
      <title>zplug を使った zsh プラグイン管理術</title>
      <link>https://tellme.tokyo/post/2015/12/13/174209/</link>
      <pubDate>Sun, 13 Dec 2015 17:42:09 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2015/12/13/174209/</guid>
      <description>zplug とは zsh のプラグインマネージャ。
https://github.com/b4b4r07/zplug
 何でも管理できる（コマンド、Gist、oh-my-zsh のプラグイン、GitHub Releases のバイナリ） 非同期インストール/アップデート ブランチロック・リビジョンロック インストール後の コマンド実行 hook あり oh-my-zsh などの外部プラグインをサポート バイナリを管理できる（GitHub Releases） shallow clone できる（オン・オフ） 依存関係の記述ができる ユーザはプラグインマネージャのことを考えなくていい（*.plugin.zsh 不必要） 選択的インターフェイスとの連携（fzf, peco, percol, zaw）  書き方 zplug はタグという概念を持っている。タグとはプラグインの属性情報を表したもので、タグ:値 のセットで記述していく。
zplug &amp;#34;foo/bar&amp;#34;, as:command, of:&amp;#34;*.sh&amp;#34; こんな具合である。各タグ間はカンマと一つ以上のスペース（,　）で区切る必要がある。タグの値は必ずしもクォートで括る必要はないが、ワイルドカードなどファイルグロブを値と指定する場合、シェルに展開されないようにクォーティングする。
タグ一覧 現在利用できるタグは以下のとおり。
   タグ 説明 値 (デフォルト値) 例     as コマンドかプラグインかを指定する plugin,command (plugin) as:command   of source するファイルへの相対パスかパスを通すコマンドへの相対パスを指定する（glob パターンでも可） - (&amp;quot;*.zsh&amp;quot;) of:bin,of:&amp;quot;*.sh&amp;quot;   from 外部からの取得を行う gh-r,gist,oh-my-zsh,github,bitbucket (github) from:gh-r   at ブランチ/タグを指定したインストールをサポートする ブランチかタグの名前 (master) at:v1.</description>
    </item>
    
    <item>
      <title>zsh のプラグインマネージャ</title>
      <link>https://tellme.tokyo/post/2015/11/24/142143/</link>
      <pubDate>Tue, 24 Nov 2015 14:21:43 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2015/11/24/142143/</guid>
      <description>antigen ですよね、やっぱり。最近は antigen の軽量バージョンである zgen もアツいようです。
僕も同様に、最初は antigen 使っていたんですが、まずプラグインの読み込みが遅い（tmux でペインを頻繁に開いたりする身からするとローディングが遅いのはツライ）のと、antigen 自体の機能が貧弱で困ってました。例えば、antigen はプラグインしか管理してくれませんよね。コマンドも管理しようとすると一工夫するしかありません（例: b4b4r07/http_code）。それに、fzf や jq など CLI ツールとしては有用でもコンパイルする必要があるものの管理は不可能でした。
zplug すべての要望に応えるプラグインマネージャをスクラッチから作っています。
  b4b4r07/zplug

 並列インストール（擬似マルチスレッド） ブランチ/タグ指定 コマンド管理（言語は問わない） バイナリ管理（GitHub Releases 限定） ビルド機能（インストール時に任意のコマンドを実行） 限定インストール（条件が真のときのみインストール） 依存関係の管理    まだまだアルファ版でトータルの完成度でいうと antigen には及ばないのでこれからです。 年内のリリース（あわよくば Advent Calender でリリースしたい）を目指して開発中です。
設定は以下のような感じで書けるようにしています。
source ~/.zplug/zplug # Make sure you use double quotes zplug &amp;#34;zsh-users/zsh-syntax-highlighting&amp;#34; zplug &amp;#34;zsh-users/zsh-substring-search&amp;#34; # shell commands zplug &amp;#34;holman/spark&amp;#34;, as:cmd # shell commands (specify export directory path using `of` specifier) zplug &amp;#34;b4b4r07/http_code&amp;#34;, as:cmd, of:bin # shell commands (whatever language is OK; e.</description>
    </item>
    
    <item>
      <title>enhancd という autojump/z ライクな bash/zsh プラグインを書いた</title>
      <link>https://tellme.tokyo/post/2014/11/20/134901/</link>
      <pubDate>Thu, 20 Nov 2014 13:49:01 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2014/11/20/134901/</guid>
      <description>【追記 2015-07-21】
拡張版 cd コマンドの enhancd が生まれ変わった - tellme.tokyo
enhancd v2.0 として生まれ変わりました。 enhancd [ɛnhǽn-síːdí] b4b4r07/enhancd.sh - GitHub  enhancd.sh とは autojump や z.sh などにインスパイアされて、後述する cdhist.sh をベースに作成されたディレクトリ移動をサポートするツールのことで、今回はそれらにも勝るとも劣らない機能を追加・拡張したので公開することにした。
作った経緯 Bashの小枝集にて紹介されている cdhist.sh というものがある。これは説明にもある通り
 ブラウザの「戻る」や「進む」のようにカレントディレクトリを行ったりきたりできるコマンド。これはリング状のディレクトリバッファを持っており以下の様な使われ方をする&amp;hellip;（※都合により引用を解釈の変わらない程度に変更）
 yusuke ~[1]$ . cdhist.sh # (cdhist を起動) yusuke ~[2]$ cd /tmp # (カレントディレクトリが /tmp に移る) yusuke /tmp[3]$ cd /usr/bin # (カレントディレクトリが /usr/bin に移る) yusuke /usr/bin[4]$ - # (ひとつ前に戻る) yusuke /tmp[5]$ cd /etc # (カレントディレクトリが /etc に移る) yusuke /etc[6]$ - # (ひとつ前に戻る) yusuke /tmp[7]$ + # (ひとつ後に進む) yusuke /etc[8]$ = # (ディレクトリの履歴一覧表示) 3 /usr/bin 2 ~ 1 /tmp 0 /etc yusuke /etc[9]$ = 2 # (リスト上のディレクトリを直接指定) yusuke ~[10]$ というスクリプトである。しばらくこれを満足して使っていたのだが、いくつかの不満点を抱くようになった。</description>
    </item>
    
  </channel>
</rss>
