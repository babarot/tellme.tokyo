<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GKE on tellme.tokyo</title>
    <link>https://tellme.tokyo/tags/gke/</link>
    <description>Recent content in GKE on tellme.tokyo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>BABAROT All Right Reserved.</copyright>
    <lastBuildDate>Mon, 30 Oct 2017 15:02:23 +0900</lastBuildDate>
    
	<atom:link href="https://tellme.tokyo/tags/gke/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cloud Identity-Aware Proxy を使って GCP backend を保護する</title>
      <link>https://tellme.tokyo/post/2017/10/30/cloud-iap/</link>
      <pubDate>Mon, 30 Oct 2017 15:02:23 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2017/10/30/cloud-iap/</guid>
      <description>Cloud IAP とは  Cloud ID-Aware Proxy（Cloud IAP）は、Google Cloud Platform で動作するクラウド アプリケーションへのアクセスを制御します。 Cloud IAP はユーザー ID を確認し、そのユーザーがアプリケーションへのアクセスを許可されるかどうかを判断します。 - https://cloud.google.com/iap/
 つまり Cloud Identity-Aware Proxy (Cloud IAP、または IAP) を使うことで、任意の GCP リソース 1 に存在するロードバランサに対して、許可された Google アカウントやサービスアカウントによるアクセスのみに絞ることができます。 また、このアクセスリスト (ACL) の追加や削除などは GCP のウェブコンソールから簡単に制御することができます。
設定方法 GLB を作成する IAP を使う場合、GCP 上にロードバランサ (LB) を用意する必要があります。 これは IAP が LB に対して設定されるからです。
本記事では GKE、GCE での設定方法について説明します。 現時点で GAE にも対応していますが今回は検証しません。
1. GKE GKE で外部に公開したサービス (の Ingress) に対して ACL を設定したい、などでしょうか。 Ingress リソースを作成すると、自動で GLBC (GCE Load-Balancer Controller) が割り当てられます。 これは、GCP のウェブコンソールからも確認できます (メニュータブから Network services &amp;gt; Load balancing)。</description>
    </item>
    
    <item>
      <title>ブログを GKE #k8s に移した</title>
      <link>https://tellme.tokyo/post/2017/08/03/015238/</link>
      <pubDate>Thu, 03 Aug 2017 01:52:38 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2017/08/03/015238/</guid>
      <description>このはてなブログで使っていたドメインを続用するため、移行後も tellme.tokyo です。
移行した背景や技術的な言及は移行先のエントリに書きました。
ブログをGKEで運用し、Spinnakerでデプロイする | tellme.tokyo
おそらくこっちのブログに記事を載せる機会は少なくなりますが、削除する予定は今のところありません。</description>
    </item>
    
    <item>
      <title>ブログをGKEで運用し、Spinnakerでデプロイする</title>
      <link>https://tellme.tokyo/post/2017/07/30/blog-on-gke-deployed-by-spinnaker/</link>
      <pubDate>Sun, 30 Jul 2017 12:37:33 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2017/07/30/blog-on-gke-deployed-by-spinnaker/</guid>
      <description>このブログをはてなブログから Google Container Engine (GKE) に移行しました。
今回、移行先に GKE を選択した理由は GKE を使ってみたかったからです。ある Web サービスを GKE に移行することになったのですが、今まで Kubernetes を含め触ったことがなかったので、自分の持つサービスで練習がてらと思いブログを題材にしました。
目次
 移行のためにやったこと  ブログ用の Docker コンテナを作成 kubernetes cluster を構築 コンテナの入った Pod を動かす HTTPS 化する   記事の配信まで  Circle CI による継続的インテグレーション Spinnaker による継続的デリバリ   所感など  移行のためにやったこと 今回の移行に際し、移行周りのスクリプトや kubernetes のマニフェストファイル、及び記事自体を管理するために GitHub にリポジトリを作りました。
 1. ブログ用の Docker コンテナを作成 まずはブログを配信するためのサーバを載せたコンテナを作成します。静的サイトジェネレーターには Hugo を利用しました。
FROMgolang:1.8-alpine AS hugoRUN apk add --update --no-cache git &amp;amp;&amp;amp; \  go get -v github.</description>
    </item>
    
  </channel>
</rss>