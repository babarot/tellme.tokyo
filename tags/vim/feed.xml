<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vim on tellme.tokyo</title>
    <link>https://tellme.tokyo/tags/vim/</link>
    <description>Recent content in vim on tellme.tokyo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>BABAROT All Right Reserved.</copyright>
    <lastBuildDate>Wed, 31 Jan 2018 00:20:45 +0900</lastBuildDate>
    
	<atom:link href="https://tellme.tokyo/tags/vim/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>開いたファイルに対して ansible-vault を Vim から実行する</title>
      <link>https://tellme.tokyo/post/2018/01/31/vim-ansible-vault/</link>
      <pubDate>Wed, 31 Jan 2018 00:20:45 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2018/01/31/vim-ansible-vault/</guid>
      <description>生の何かをそのままリポジトリの置いておくのが微妙ということで特定のファイルを ansible-vault で暗号化してプッシュする、ということはよくあると思います。
例えば、Kubernetes の Secret を管理した YAML ファイルとかですね (例として正しいかは別の話ですが)。
その場合、こんな感じで暗号化する必要があります。
$ ansible-vault encrypt --vault-password-file=~/.vault_password secret.yaml 初回だけで済むならそこまで不便ではないのですが、このファイルを編集し再度リポジトリに上げるには復号と暗号化のセットも必要になります。 これがとても面倒です。 編集が必要ということは Vim なりのエディタで開くわけなので、そこでこのセットもいっぺんにできたら便利なわけです。
というわけで開いているファイル (バッファ) に対して ansible-vault (encrypt|decrypt) を実行するプラグインをつくりました。
 GIF イメージにある Credentials はサンプルです。
 filetype が ansible-vault であれば yes/no で復号するかどうか聞いてあげると、もう一手間省けるのでさらに便利な気もしますが、とりあえずの不便さは解消されたので現状使える Vim コマンドと機能はこれだけです。
 :AnsibleVaultEncrypt :AnsibleVaultDecrypt  便利になりました。
追記 (2018-10-25) chase/vim-ansible-yaml: Add additional support for Ansible in VIM
先行実装がありました。ただメンテが滞っておりメンテナーを募集しているみたいです。</description>
    </item>
    
    <item>
      <title>最近の Vim のプラグイン管理について考える</title>
      <link>https://tellme.tokyo/post/2016/12/05/021806/</link>
      <pubDate>Mon, 05 Dec 2016 02:18:06 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2016/12/05/021806/</guid>
      <description>この記事は Vim Advent Calendar 2016 の 5 日目の記事です。
以前、neobundle.vim と vim-plug の比較記事を書きました((おい、NeoBundle もいいけど vim-plug 使えよ))。それから数ヶ月後、dein.vim が登場し、再び比較記事を書こうと思っていたのですが、気づけばあれから 1 年が経っていました((dein.vim リリース前に Shougo さんから記事を書いてほしいといった DM を受け取っていた))。この記事は半年前 (&amp;lsquo;16年8月頃) に大枠だけ書き Qiita の限定共有に投稿していたのものを Advent Calendar 向けに書き下ろしたものです((限定投稿していたのにも関わらず PV が多く、はてブが 12 付いていたので大部分を踏襲しつつ Shougo さんのインタビューを加えました))。
Vim プラグインの歴史 GitHub 以前 (〜2008年) 昔の話です。Vim script で拡張の機能を書いたらそのスクリプトを vim.org にアップして開発者同士で共有したり、ユーザがダウンロードして使っていたようです。おそらくコレが所謂「プラグイン管理」の始まりなのですが、このときはまだ手動で行われていたようです (残念ながら、このときはまだ Vim に出会っていなかったためその肌感は分かりません&amp;hellip;)。
例えば、こんな機能も Vim script で書いた拡張です (autogroup などは考慮してません)。
autocmd BufWritePre * %s/\s\+$//eVim 7 から Vimball という機能が Vim 本体に同梱されて、それからはこれを利用するユーザもいたようです。vim.org からアーカイブされたスクリプトを持ってきて、:so % したり、気に入ったら runtimepath 以下に置いて自動読み込みしたり。その頃の plugins ディレクトリは混沌としていたようです。ペライチのスクリプトが無造作に転がっており、同名ファイルに気をつけたりアップデートの情報は自分でキャッチしなければなりませんでした。</description>
    </item>
    
    <item>
      <title>運営として VimConf 2016 に参加してきた</title>
      <link>https://tellme.tokyo/post/2016/11/06/230902/</link>
      <pubDate>Sun, 06 Nov 2016 23:09:02 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2016/11/06/230902/</guid>
      <description>と、仰々しいタイトルにしましたが、株式会社ミクシィさんにて行われた VimConf 2016 の参加レポートです。自分は一般参加者としてではなく、一部運営に携わったのでその点について主に書ければなと思います。
tl;dr   VimConf 2016 のまとめ役として参加しました スライドの感想や資料については他の方のレポートを見てください 「ババロットさん、アイコン変えた方がいいよ」  まとめ役として参画した背景 ある日突然、社内 Slack の個人チャンネル (分報的なアレ) にてこんなポストが投げられました (リンクだけ)。
 [https://github.com/vim-jp/vimconf/issues/106:title]
二つ返事で参加レスをしたわけですが、これはノリで運営やってみました、とかでは全くないです。日々、Vim を使い vim-jp やその界隈の人たちのプラグインなどを使ったりし感謝していくうちに、いつかコミュニティに携わりたい・還元したいという気持ちが芽生えていたためです。たまたまこの煽りポストがいい後押しとなり、運営への参画を踏み出すきっかけになったのでした。
ひとり KPT まとめ役という肩書きで参加したわけですが、色々振り返ってみるとやり残したことや課題感、続けたいことなどが見えたのでまとめてみます。
 KEEP  VimConf 2017 への参画  せっかく自分の中に溜まったノウハウをここで途絶えさせるのは勿体無いので、次回も何らかの形で携わりたい。貢献し続けることも大切   参加率の良さ  9 割近くの参加率、総勢約 120 名での VimConf は初のこと。募集開始を遅らせたりなどの工夫があった。果たしてこれが功を奏したかは来年も試してテストしてみないとだけど   ケータリングの量  多すぎず少なすぎずで懇親会終わる頃にちょうど綺麗になくなった感。廃棄もほとんどなかったんじゃないかな。ここは自分ががっつり噛んでいたところなので見事な新卒力を発揮できた   交流が活発に見えた  誰とも話せない、という人はいなかった気がします。それとドリンク島がドリンクを求めた立ち寄った人との交流の場になっていたのは良かった     PROBLEM  コミットが足りなかった  TRY: 忙し月と準備が被った。次回も参加することで乗り越えていきたいところ   意外とバタバタ@懇親会準備1  TRY: 各種業者に当日リマインダを掛けられたのはよかった。ただ、一部到着連絡をもらえず開場まで運ばれたのには焦った (受付に人がいて気づいてくれた.</description>
    </item>
    
    <item>
      <title>Vim 8.0 がリリースされた</title>
      <link>https://tellme.tokyo/post/2016/09/12/232337/</link>
      <pubDate>Mon, 12 Sep 2016 23:23:37 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2016/09/12/232337/</guid>
      <description>本日 (2016-09-12 21:24:19 +09:00)、Vim 8.0 がリリースされました。
メジャーアップデートは 2006 年 5 月の Vim 7.0 以来なのでおよそ 10 年ぶりです。おめでとうございます！
 [https://github.com/vim/vim/commit/bb76f24af2010943387ce696a7092175b4ecccf2:embed:cite]
Vim は GitHub に移行したので最新の Vim 8.0 をインストールするには、
$ git clone https://github.com/vim/vim $ cd vim $ ./configure #好きな引数 $ make &amp;amp;&amp;amp; sudo make install でよいです。めっちゃ簡単
変更点はリリースノートを見ましょう。私は絶賛試している最中です。
 Happy Vimming!
[https://github.com/vim/vim:embed:cite]</description>
    </item>
    
    <item>
      <title>Vim からシェルコマンドを実行するプラグインを作った</title>
      <link>https://tellme.tokyo/post/2014/10/05/234607/</link>
      <pubDate>Sun, 05 Oct 2014 23:46:07 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2014/10/05/234607/</guid>
      <description>GitHub・b4b4r07/vim-shellutils
Vim の魅力の1つにシェルとの親和性が挙げられます。GUIじゃない Vim を使っている時にどうしてもさっと ls したかったり、さっとファイルの中身を cat してみたかったりしたときに、Vim を終了したくない、なんてことはありませんか。Ctrl-z で Vim を中断し、コマンドをタイプし処理して戻ってきた頃には、「あれ、、、なんだったっけ」なんてこともしばしば。思いつきやアイデアは1分1秒が大事なのです。
そこで Vim のコマンドライン領域からシェルコマンドもどきを実行できるプラグインを作成しました。もどきと書いたのは call system() や !command の類を使用しないためです（シェルコマンドをエミュレート）。どちらもシェルのコマンドに依存する上に一時的に Vim 画面が切り替わったり、あまり挙動が好みではありませんでした。そこで純 Vim script で作成することで Vim さえあればシェルコマンドを実行出来るようにしました。
詳しくは
 README.md doc/shellutils.txt  をご覧ください。</description>
    </item>
    
    <item>
      <title>Vimでcdしたときにそのディレクトリの中身を自動でリストアップするプラグイン作った</title>
      <link>https://tellme.tokyo/post/2014/07/31/021941/</link>
      <pubDate>Thu, 31 Jul 2014 02:19:41 +0900</pubDate>
      
      <guid>https://tellme.tokyo/post/2014/07/31/021941/</guid>
      <description>Vim 内で :cd したときに、そのディレクトリにあるファイル一覧を取得したくありませんか。:!ls でも解決できますが内部的に処理したかったので却下。イメージとしては、シェルなどでいうところの cd() { builtin cd &amp;quot;$@&amp;quot; &amp;amp;&amp;amp; ls -F; } です。Vim内で明示的に :cd したときに自動で ls します。もっと他に簡単なやり方があるかもしれませんが、当方としてはこのやり方で満足していますし、plugin 作成してみたかったという背景もあるので。
b4b4r07/vim-autocdls インストール方法 NeoBundleの利用者は以下でいいです。
NeoBundle &#39;b4b4r07/autocdls.vim&#39; とりあえず、パスの通ったディレクトリに配置すればいいです。
使い方 cd するだけです。すると勝手に ls されファイル一覧を取得出来ます。:cd だけでなく、:lcd や :chdir などでもいいです。もちろん、その省略形も可です。また、:Ls とすると、カレントディレクトリのファイル一覧が取得できます。引数を省略すればカレントディレクトリですが、与えてやれば存在する引数先のディレクトリ内のファイルを取得します。ここらへんは、シェルの ls と同じです。
:Ls! とすると、ls -A と同様の働きをします。
オプション シェルの ls よりすこしリッチになっていて、自動でファイル数も取得します。この機能を切りたい場合は、g:autocdls_show_filecounter = 0 とすればよいです（デフォルトでは1）。また、カレントディレクトリ情報（:pwd）も同時に欲しい場合は、g:autocdls_show_pwd = 1 としてください。
以下に設定例を載せておきます。
&amp;quot; コマンドラインの高さを上げる let g:autocdls_set_cmdheight = 2 &amp;quot; Ls したときにファイル数をカウントする let g:autocdls_show_filecounter = 1 &amp;quot; Ls したときに pwd を表示しない let g:autocdls_show_pwd = 0 &amp;quot; ls と打つと Ls に置換される let g:autocdls_alter_letter = 1 &amp;quot; 表示方法をスペース区切りから改行にしない let g:autocdls_newline_disp = 0 </description>
    </item>
    
  </channel>
</rss>